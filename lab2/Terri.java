package lab2;

import java.util.Scanner;

public class Terri {

	public static void main(String[] args) {
		/*
		 * Алгоритм Тэрри – алгоритм поиска маршрута в связном графе G (V,E),
		 * соединяющего заданные вершины v и w. Исходя из вершины v и осуществ- ляя
		 * последовательный переход от каждой достигнутой вершины к смеж- ной ей
		 * вершине, всегда можно найти маршрут в связном графе G (V,E), со- единяющий
		 * заданные вершины v и w. Переход от вершины к вершине со- гласно алгоритму
		 * осуществляется по следующим правилам: 
		 * 1) при проходе ребра необходимо всякий раз отмечать направление, в котором оно было пройдено; 
		 * 2) исходя из некоторой вершины v′, нужно всегда следовать по тому ребру, которое не было
		 * пройдено или было пройдено в противопо- ложном направлении; 
		 * 3) для всякой вершины v′, отличной от v, необходимо отмечать по- меткой «х» первое
		 * заходящее ребро, если вершина v′ встречается первый раз; 
		 * 4) исходя из вершины v′, отличной от v, по первому заходящему в v′ ребру нужно идти лишь
		 * тогда, когда нет других возможностей.
		 */
		// Задана матрица смежности
		int[][] matrix = { { 0, 1, 0, 0, 1, 0 }, 
				          { 1, 0, 1, 1, 0, 0 }, 
				          { 0, 1, 0, 0, 0, 1 }, 
			             { 0, 1, 0, 0, 1, 0 },
			           	{ 1, 0, 0, 1, 0, 0 }, 
				       { 0, 0, 1, 0, 0, 0 } };
		// Вводим вершины с клавиатуры
		Scanner scan = new Scanner(System.in);
		System.out.println("Введите номер начальной вершины");
		int start = scan.nextInt();
		System.out.println("Введите номер конечной вершины");
		int end = scan.nextInt();
		MethodsTerri methods = new MethodsTerri();
		// Находим и выводим смежные списки
		methods.showSLists(methods.formSLists(matrix));
		// Находим путь
		methods.findWay(methods.formSLists(matrix), start, end);
		scan.close();
	}
}
